[{"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\index.js":"1","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\App.js":"2","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\store\\configureStore.js":"3","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\reducers\\quizReducer.js":"4","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Home\\Home.js":"5","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\actions\\quizAction.js":"6","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\config\\Axios.js":"7","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Question\\Question.js":"8","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Choices\\Choices.js":"9","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\ModalComponent.js":"10"},{"size":610,"mtime":1607272715415,"results":"11","hashOfConfig":"12"},{"size":601,"mtime":1607271456934,"results":"13","hashOfConfig":"12"},{"size":349,"mtime":1607232946721,"results":"14","hashOfConfig":"12"},{"size":660,"mtime":1607276687323,"results":"15","hashOfConfig":"12"},{"size":2195,"mtime":1607278992181,"results":"16","hashOfConfig":"12"},{"size":1904,"mtime":1607278297070,"results":"17","hashOfConfig":"12"},{"size":130,"mtime":1607233213826,"results":"18","hashOfConfig":"12"},{"size":3328,"mtime":1607272780617,"results":"19","hashOfConfig":"12"},{"size":1412,"mtime":1607258274585,"results":"20","hashOfConfig":"12"},{"size":3592,"mtime":1607278888057,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"19ud2y8",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\index.js",["46"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Configstore from './store/configureStore'\r\nimport {Provider} from 'react-redux'\r\nimport {startGetQuiz} from './actions/quizAction'\r\n\r\nconst store = Configstore()\r\nconsole.log('initial state',store.getState())\r\nstore.subscribe(()=>{             // calls for every update in redux \r\n    console.log(store.getState()) \r\n})\r\n\r\n// handle page reload\r\n//store.dispatch(startGetQuiz())\r\n\r\nconst jsx = (\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(jsx,document.getElementById('root'))",["47","48"],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\App.js",["49"],"import React, { Component } from 'react'\r\nimport Home from './components/Home/Home'\r\nimport {connect} from 'react-redux'\r\nimport {startGetQuiz} from './actions/quizAction'\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n        // if(this.props.quiz.length === 0){\r\n        //     this.props.dispatch(startGetQuiz())\r\n        // }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               <Home/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        quiz : state.quiz\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(App)","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\store\\configureStore.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\reducers\\quizReducer.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Home\\Home.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\actions\\quizAction.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\config\\Axios.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Question\\Question.js",["50"],"import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {startGetQuiz} from '../../actions/quizAction'\r\nimport './Question.css'\r\n\r\nimport ReactMde from \"react-mde\";\r\nimport * as Showdown from \"showdown\";\r\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nimport {startUpdateQuiz} from '../../actions/quizAction'\r\n\r\nclass Question extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            value:\"\",\r\n            edit_question : false ,\r\n            tab : 'write' \r\n        }\r\n        this.converter = new Showdown.Converter({\r\n            tables: true,\r\n            simplifiedAutoLink: true,\r\n            strikethrough: true,\r\n            tasklists: true\r\n          });\r\n    }\r\n    componentDidMount(){\r\n        console.log('componet');\r\n        console.log(this.props.quiz);\r\n        // if(this.props.quiz.length == 0){\r\n        //     this.props.dispatch(startGetQuiz())\r\n        //     console.log('first');\r\n            \r\n        // }\r\n        if(this.props.quiz){\r\n            this.setState({ value : this.props.quiz})\r\n            console.log(this.props.quiz);\r\n        }\r\n    }\r\n    handleValueChange = (value) => {\r\n        this.setState({ value });\r\n        console.log(value);\r\n      };\r\n    handleAlert = () => {\r\n        window.alert('please click on edit to make changes')\r\n    }\r\n    hanldeEdit = () => {\r\n        this.setState((prev) => {\r\n            return {\r\n                edit_question : !prev.edit_question\r\n            }\r\n        })\r\n    }\r\n    handleSave = () => {\r\n        this.setState((prev) => {\r\n            return {\r\n                edit_question : !prev.edit_question\r\n            }\r\n        })\r\n        this.props.dispatch(startUpdateQuiz())\r\n    }\r\n    handleTabChange = () => {\r\n        if(this.state.tab === 'write'){\r\n            this.setState({tab : 'preview'})\r\n        }\r\n        else {\r\n            this.setState({ tab:'write'})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='same-row'>\r\n                    <h1 className='row-left'>Question Stream</h1>\r\n                    {\r\n                        this.state.edit_question ? <SaveIcon onClick={this.handleSave} /> : <EditIcon onClick={this.hanldeEdit} />\r\n                    }\r\n                   \r\n                </div>\r\n                    {\r\n                        this.state.value.length > 0 && (\r\n                            <ReactMde\r\n                            onChange={this.state.edit_question ? this.handleValueChange : this.handleAlert}\r\n                            value={this.state.value}\r\n                            selectedTab={this.state.tab}\r\n                            onTabChange={this.handleTabChange}\r\n                            generateMarkdownPreview={markdown =>\r\n                                Promise.resolve(this.converter.makeHtml(markdown))\r\n                            }\r\n                        />\r\n                        )\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state,props) =>{\r\n    console.log(\"data\",props.data)\r\n    return {\r\n        quiz : props.data\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Question)","C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\Choices\\Choices.js",[],"C:\\Users\\abhis\\react\\gyanmatrix\\front-end\\src\\components\\ModalComponent.js",[],{"ruleId":"51","severity":1,"message":"52","line":6,"column":9,"nodeType":"53","messageId":"54","endLine":6,"endColumn":21},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":9,"nodeType":"53","messageId":"54","endLine":4,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":3,"column":9,"nodeType":"53","messageId":"54","endLine":3,"endColumn":21},"no-unused-vars","'startGetQuiz' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-global-assign","no-unsafe-negation"]